#ifndef SYNTH80S_SRC_AUDIO_SEQUENCER_STEP_SIGNAL_H

#define SYNTH80S_SRC_AUDIO_SEQUENCER_STEP_SIGNAL_H

#include "../core/audio-context.h"
#include "../core/audio-processor.h"
#include <cmath> // for floor() function
#include <iostream>

namespace synth80s
{
    class StepSignal: public AudioProcessor
    {
        protected:
            // the number of steps that this class should generate
            int stepCount = 8;

            // the tempo of the steps, in BPM (beats per minute)
            float bpm = 120.0f;
            // the period (duration), in samples, of one beat step
            int samplesPerStep = 1;

            /* This is the actual value used to fill the signal produced by this class.
            ** It will be incremented by 1 every new step that is generated and then reset
            ** to zero, and so on. */
            int currentStepValue = 1; // steps start from 1 (1, 2, 3, 4, 5, etc.)

            /* How many samples where already generated by this class.
            ** This property is used for comparing it against 'samplesPerStep', to determine
            ** when a new step should begin.
            ** This variable will be reset to zero once a new step needs to begin. */
            int computedSamples = 0;

            // the actual block (array) of audio samples generated by this class
            float* outputBlock = nullptr;

        public:
            // constructor, must receive AudioContext as external dependecy
            StepSignal(AudioContext* audioContext);

            /* implementation of virtual (abstract) method, inherited from 'AudioProcessor' class;
            ** the signal is stored into the 'block' buffer inherited from 'AudioNode' class;
            ** this method is responsible for generating the actual synth sound; */ 
            void process(float* inputBlock = nullptr) override;

            // implementation of abstract method, inherited from 'AudioProcessor' class
            float* getProcessedOutput() override;

            void setBPM(float bpm);
            int getBPM();

            void setStepCount(int stepCount);
            int getStepCount();

            int getSamplesPerStep();

        protected:
            void setSamplesPerStep();
    };
}

#endif