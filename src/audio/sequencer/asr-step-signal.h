#ifndef SYNTH80S_SRC_AUDIO_SEQUENCER_ASR_STEP_SIGNAL_H

#define SYNTH80S_SRC_AUDIO_SEQUENCER_ASR_STEP_SIGNAL_H

#include "../core/audio-context.h"
#include "../core/audio-processor.h"
#include "step-signal.h"
#include <cmath> // for floor() function
#include <iostream>

namespace synth80s
{
    /* This is an Attack-Sustain-Release step signal
    ** It generates a signal that has steps, but the steps are not constant, they are
    ** varying according to an ASR envelope. */
    class AsrStepSignal: public AudioProcessor
    {
        private:
            StepSignal stepSignal;

            // The duration of Attack and Release.
            // This is measured in normalized percentages out of the length of one step
            float attackDuration = 0.2; // 10% in normalized percentages
            float releaseDuration = 0.2; // 10% in normalized percentages
            
            // The duration of Attack, Sustain and Release (measured in samples)
            int attackSamples = 0; // measured in samples (frames)
            int sustainSamples = 0; // measured in samples (frames)
            int releaseSamples = 0; // measured in samples (frames)

            /* How many samples where already generated by this class.
            ** This property is used for comparing it against 'samplesPerStep', to determine
            ** when a new step should begin.
            ** This variable will be reset to zero once a new step needs to begin. */
            int computedSamples = 0;

            // CurrentPhase currentPhase = ATTACK;

            // The actual block (array) of audio samples generated by this class
            float* outputBlock = nullptr;

            // This are the step followers, they follows the current step as the block is being processed
            int previousStep = 1;
            int currentStep = 1;

            // These are the Atack and Sustain folowers, they follow the Attack or Sustain
            // as the block is being processed
            int attackSampleIndex = 0; // always reset to zero at the begining of this function
            int sustainSampleIndex = 0; // always reset to zero at the begining of this function

            // The previously computed sample of this class
            float previousSample = 0.0f;

        public:
            // constructor, must receive AudioContext as external dependecy
            AsrStepSignal(AudioContext* audioContext);

            /* implementation of virtual (abstract) method, inherited from 'AudioProcessor' class;
            ** the signal is stored into the 'block' buffer inherited from 'AudioNode' class;
            ** this method is responsible for generating the actual synth sound; */ 
            void process(float* inputBlock = nullptr) override;

            // implementation of abstract method, inherited from 'AudioProcessor' class
            float* getProcessedOutput() override;

            void setBPM(float bpm);
            int getBPM();

            void setStepCount(int stepCount);
            int getStepCount();

        private:
            // Set the number of samples (frames) for Attack, Sustain and Release phases
            void setSamplesPerStep();
    };
}

#endif
