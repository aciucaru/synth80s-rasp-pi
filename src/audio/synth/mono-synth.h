#ifndef SYNTH80S_SRC_AUDIO_SYNTH_MONO_SYNTH_H

#define SYNTH80S_SRC_AUDIO_SYNTH_MONO_SYNTH_H

#include "../core/audio-context.h"
#include "../core/audio-processor.h"
#include "../oscillator/unison-oscillator.h"
// #include <vector>

namespace synth80s
{
  class MonoSynth: public AudioProcessor
  {
    private:
      UnisonOscillator oscillator1;

      // the gain of the oscillator, this is a multiplier used to increase or lower the
      // volume of the socillator
      float gain = 1.0f;

      // the actual block (array) of audio samples generated by this class
      float* outputBlock = nullptr;

    public:
      // constructor, must receive AudioContext as external dependecy
      MonoSynth(AudioContext* audioContext);

      /* implementation of virtual (abstract) method, inherited from 'AudioProcessor' class;
      ** the signal is stored into the 'block' buffer inherited from 'AudioNode' class;
      ** this method is responsible for generating the actual synth sound; */ 
      void process(float* inputBlock = nullptr) override;

      // implementation of abstract method, inherited from 'AudioProcessor' class
      float* getProcessedOutput() override;

      UnisonOscillator& getOscillator();
  };
}


#endif
