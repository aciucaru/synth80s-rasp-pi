#ifndef SYNTH80S_SRC_AUDIO_OSCILLATOR_UNISON_OSCILLATOR_H

#define SYNTH80S_SRC_AUDIO_OSCILLATOR_UNISON_OSCILLATOR_H

#include "../core/audio-context.h"
#include "../core/audio-processor.h"
#include "multishape-oscillator.h"
#include "../note/note.h"

#include <vector>
#include <iostream>

namespace synth80s
{
  class UnisonOscillator: public AudioProcessor
  {
    private:
      // how many oscillators are in total
	  static const int OSC_COUNT = 5;
	  
      // the oscillators
      std::vector<MultishapeOscillator*> oscillatorArray;
      
      // the buffers      
      std::vector<float*> bufferArray;
      
      // the note and the frequencies for each unison oscillator
      Note note;      
      std::vector<float> frequencyArray;

      // the frequency of this oscillator
      float frequency = 440.0f;

      // the detune value, a frequency detune between the oscillators (in cents)
      int unisonCentsDetune = 0;

      // the gain of the oscillator, this is a multiplier used to increase or lower the
      // volume of the socillator
      float gain = 1.0f;

      // the actual block (array) of audio samples generated by this class
      float* outputBlock = nullptr;

    public:
      // constructor, must receive AudioContext as external dependecy
      UnisonOscillator(AudioContext* audioContext);

      /* implementation of virtual (abstract) method, inherited from 'AudioProcessor' class;
      ** the signal is stored into the 'block' buffer inherited from 'AudioNode' class;
      ** this method is responsible for generating the actual wave; */
      void process(float* inputBlock = nullptr) override;

      // implementation of abstract method, inherited from 'AudioProcessor' class
      float* getProcessedOutput() override;

	  void setMainNote(Note note);
      void setOctavesAndSemitones(int octaves, int semitones);
      void setOctavesOffset(int octaves);
      void setSemitonesOffset(int semitones);
      
      void setUnisonDetune(int centsDetune);
      
      void setTriangleWeight(float weight);
      void setSawtoothWeight(float weight);
      void setSquareWeight(float weight);
      
      void setGain(float gain);
  };
}

#endif

